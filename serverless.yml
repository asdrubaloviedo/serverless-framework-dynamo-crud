service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          # Agregramos el codigo arn al rol, el cual lo podemos encontrar en Dynamodb -> usersTable -> Información general -> Información adicional -> ARN
          Resource: arn:aws:dynamodb:us-east-1:471112938813:table/${self:provider.environment.USERS_TABLE}
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::${self:provider.environment.BUCKED}/*
        - Effect: Allow
          Action:
            - 's3:PutObject'
            - 's3:CreateMultipartUpload'
          Resource: arn:aws:s3:::bucket-serverless-course-232132/*
  environment:
    # Establecemos nuestras variables de entorno para ser usadas como "self:provider..environment" o "process.env"
    USERS_TABLE: usersTable
    BUCKED: bucket-serverless-course-232132

functions:
  createUser:
    handler: ./createUsers/handler.createUser
    events:
      - http:
          path: users
          method: post
          # Especificamos configuraciones adicionales al request
          request:
            # Especificamos configuraciones adicionales a los parametros usando un schema
            schemas:
              # Especificamos que el schema tendran el formato json
              application/json: ${file(./schemas/user-schema.json)}
    package:
      patterns:
        - ./createUsers/handler.js

  getUser:
    handler: ./getUsers/handler.getUsers
    events:
      - http:
          path: users/{id}
          method: get
          # Especificamos configuraciones adicionales al request
          request:
            # Especificamos configuraciones adicionales a los parametros
            parameters:
              paths:
                # Especificamos que el id sera requerido
                id: true
    package:
      patterns:
        - ./getUsers/handler.js

  updateUser:
    handler: ./updateUser/handler.updateUser
    events:
      - http:
          path: users/{id}
          method: put
          # Especificamos configuraciones adicionales al request
          request:
            # Especificamos configuraciones adicionales a los parametros
            parameters:
              paths:
                # Especificamos que el id sera requerido
                id: true
            # Especificamos configuraciones adicionales a los parametros usando un schema
            schemas:
              # Especificamos que el schema tendran el formato json
              application/json: ${file(./schemas/user-schema.json)}
    package:
      patterns:
        - ./updateUser/handler.js

  deleteUser:
    handler: ./deleteUser/handler.deleteUser
    events:
      - http:
          path: users/{id}
          method: delete
          # Especificamos configuraciones adicionales al request
          request:
            # Especificamos configuraciones adicionales a los parametros
            parameters:
              paths:
                # Especificamos que el id sera requerido
                id: true
    package:
      patterns:
        - ./deleteUser/handler.js

  signedUrl:
    handler: ./signedUrl/handler.signedS3Url
    events:
      - http:
          path: signedurl
          method: get
          # Especificamos configuraciones adicionales al request
          request:
            # Especificamos configuraciones adicionales a los parametros
            parameters:
              querystrings:
                filename: true
    package:
      patterns:
        - ./signedUrl/handler.js

  # Lambda que se invocara al recibir un evento de creacion de S3
  thumGenerator:
    handler: ./thumbnail/handler.thumbGenerator
    # Se utiliza una capa Lambda para compartir dependencias comunes
    layers:
      - !Ref BaseLambdaLayer
    events:
      - s3:
          # Nombre del bucket
          bucket: bucket-serverless-course-232132
          # Evento de s3 que invocara a la lambda
          event: s3:ObjectCreated:*
          # No queremos crear un bucket nuevo, usaremos el ya existente
          existing: true
          # Reglas del evento
          rules:
            # Cada vez que se carge una imagen al directorio upload(de nuestra consola de S3 en AWS) se invocara la lambda
            - prefix: upload/
    package:
      patterns:
        - ./thumbnail/handler.js

# Define una capa Lambda reutilizable con las dependencias Node.js comunes. Mejora la eficiencia del despliegue.
# Nota: En el README estan los comandos necesarios para crear/subir las lambdas layer
layers:
  base:
    name: prd-dependencies
    description: layer for nodejs prd dependencies
    licenseInfo: MIT
    compatibleRuntimes:
      - nodejs18.x
    compatibleArchitectures:
      - x86_64
    package:
      artifact: app/nodejs-layer.zip

resources:
  Resources:
    # Creamos el recurso de Dynamo
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    # Creamos el recurso de S3
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        # Sera de acceso publico
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        # Nombre unico global
        BucketName: bucket-serverless-course-232132
    # Creamos la política de nuestro S3
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
                - 's3:GetObject'
              Effect: Allow
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3Bucket
                  - /*
              Principal: '*'
